package com.budra.uvh.config; // Make sure this package matches where you save the file

import jakarta.inject.Inject;
import jakarta.ws.rs.core.Feature;
import jakarta.ws.rs.core.FeatureContext;
import org.glassfish.hk2.api.DynamicConfigurationService;
import org.glassfish.hk2.api.MultiException;
import org.glassfish.hk2.api.Populator;
import org.glassfish.hk2.api.ServiceLocator;
import org.glassfish.hk2.utilities.ClasspathDescriptorFileFinder;
import org.glassfish.hk2.utilities.DuplicatePostProcessor;
// Import SLF4j logger
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
// Removed java.util.logging imports

/**
 * A JAX-RS Feature that enables HK2's auto-discovery mechanism.
 * It scans the classpath for HK2 inhabitant files (typically generated by
 * hk2-metadata-generator and located in META-INF/hk2-locator/default)
 * and populates the HK2 ServiceLocator with the services defined in those files.
 *
 * Register this feature in your ResourceConfig to enable dependency injection
 * for components annotated with @Service (and potentially @Contract).
 */
public class AutoScanFeature implements Feature {

    // Use SLF4j logger
    private static final Logger log = LoggerFactory.getLogger(AutoScanFeature.class);

    @Inject
    ServiceLocator serviceLocator; // HK2 will inject the ServiceLocator instance

    @Override
    public boolean configure(FeatureContext context) {
        // Get HK2 services needed for populating the locator
        DynamicConfigurationService dcs = serviceLocator.getService(DynamicConfigurationService.class);
        if (dcs == null) {
            log.error("HK2 DynamicConfigurationService not found. Auto-scanning cannot proceed.");
            return false; // Indicate configuration failure
        }

        Populator populator = dcs.getPopulator();
        if (populator == null) {
            log.error("HK2 Populator not found. Auto-scanning cannot proceed.");
            return false; // Indicate configuration failure
        }

        try {
            log.info("Populating HK2 ServiceLocator from classpath inhabitant files...");
            // Populator - populates HK2 service locators from inhabitants files.
            // ClasspathDescriptorFileFinder - finds files typically named "default"
            // from "META-INF/hk2-locator/" directories on the classpath.
            // DuplicatePostProcessor - handles potential duplicate service definitions.
            populator.populate(
                    new ClasspathDescriptorFileFinder(this.getClass().getClassLoader()),
                    new DuplicatePostProcessor()); // Handles duplicates, might log warnings

            log.info("HK2 ServiceLocator population complete.");

        } catch (IOException ex) {
            // Error reading descriptor files
            log.error("IOException during HK2 descriptor file scanning.", ex);
        } catch (MultiException ex) {
            // Error during population (e.g., class loading issues, descriptor errors)
            log.error("MultiException during HK2 ServiceLocator population.", ex);
        }
        // Return true even if population failed, allowing the application to potentially
        // start partially, though DI errors will likely occur later.
        // Consider returning false if successful population is absolutely critical.
        return true;
    }
}